using System;
using System.Collections.Generic; 
using System.Linq;
using System.Security.Cryptography; 
using System.Text;
using System.Threading.Tasks;
namespace aes_example
{
using System; 
using System.IO;
using System.Security.Cryptography;
class Program
{
public static void Main()
{
try
{
Console.WriteLine("Enter the string that has to be encrypted:");
string original = Console.ReadLine();
using (var random = new RNGCryptoServiceProvider())
{
var key = new byte[16]; 

random.GetBytes(key);
byte[] encrypted = EncryptStringToBytes_Aes(original, key); 
string roundtrip = DecryptStringFromBytes_Aes(encrypted, key);
Console.WriteLine("Original: {0}",original);
Console.WriteLine("Encrypted: {0}", Convert.ToBase64String(encrypted));
Console.WriteLine("Decrypted: {0}", roundtrip); 
Console.ReadKey();
}
}
catch (Exception e)
{
Console.WriteLine("Error: {0}", e.Message);
}
}
static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key)
{
byte[] encrypted; 
byte[] IV;
using (Aes aesAlg = Aes.Create())
{
aesAlg.Key = Key;
aesAlg.GenerateIV(); 
IV = aesAlg.IV;
aesAlg.Mode = CipherMode.CBC;
var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV); 
using (var msEncrypt = new MemoryStream())
{
using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
{
using (var swEncrypt = new StreamWriter(csEncrypt))
{
//Write all data to the stream. 
swEncrypt.Write(plainText);
}
encrypted = msEncrypt.ToArray();
}
}
}
var combinedIvCt = new byte[IV.Length + encrypted.Length]; 
Array.Copy(IV, 0, combinedIvCt, 0, IV.Length);
Array.Copy(encrypted, 0, combinedIvCt, IV.Length, encrypted.Length); 
return combinedIvCt;
}
static string DecryptStringFromBytes_Aes(byte[] cipherTextCombined, byte[] Key)
{
string plaintext = null;
using (Aes aesAlg = Aes.Create())
{
aesAlg.Key = Key;
byte[] IV = new byte[aesAlg.BlockSize / 8];
byte[] cipherText = new byte[cipherTextCombined.Length - IV.Length];
Array.Copy(cipherTextCombined, IV, IV.Length); 
Array.Copy(cipherTextCombined, IV.Length, cipherText, 0,cipherText.Length);
aesAlg.IV = IV;
aesAlg.Mode = CipherMode.CBC;
ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV); 
using (var msDecrypt = new MemoryStream(cipherText))
{
using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
{
using (var srDecrypt = new StreamReader(csDecrypt))
{
    plaintext = srDecrypt.ReadToEnd();
}
}
}
}
return plaintext;
}
}
}